/*
 * Copyright (c) 2017, nwillc@gmail.com
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'gradle.plugin.com.github.nwillc:buildinfo:0.1.2',
                'au.com.ish.gradle:release:2.2.2',
                'com.bmuschko:gradle-docker-plugin:3.2.0'
    }
}

plugins {
    id 'java'
    id 'com.github.nwillc.vplugin' version '2.1.1'
    id 'com.github.nwillc.buildinfo' version '0.1.2'
    id 'nebula.lint' version '8.3.1'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'release'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'com.github.nwillc.vplugin'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

group = 'com.github.nwillc'
version = '2.8.6-SNAPSHOT'
targetCompatibility = '1.8'
sourceCompatibility = '1.8'
mainClassName = 'com.github.nwillc.mysnipserver.RatPackApp'

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile "com.github.nwillc:opa:$opa_version",
            "io.ratpack:ratpack-core:$ratpack_version",
            "io.ratpack:ratpack-exec:$ratpack_version",
            "io.ratpack:ratpack-session:$ratpack_version",
            "io.ratpack:ratpack-guice:$ratpack_version",
            "net.sf.jopt-simple:jopt-simple:$jopt_simple_version",
            "com.fasterxml.jackson.core:jackson-core:$jackson_fasterxml_version",
            "com.fasterxml.jackson.core:jackson-databind:$jackson_fasterxml_version",
            "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_fasterxml_version",
            "com.fasterxml.jackson.core:jackson-annotations:$jackson_fasterxml_version",
            'com.google.http-client:google-http-client-jackson2:1.22.0',
            'com.google.http-client:google-http-client:1.22.0',
            'com.google.inject:guice:4.1.0',
            'com.groupon:locality-uuid:1.1.1',
            "javax.validation:validation-api:$javax_validation_version",
            "org.mongodb:mongo-java-driver:$mongo_driver_version",
            "org.tinylog:tinylog:$tiny_log_version",
            "com.github.nwillc:reloader:$reloader_version",
            "com.graphql-java:graphql-java-annotations:$graphql_annotations_version"

    compile('com.google.api-client:google-api-client:1.22.0') {
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }

    runtime "org.tinylog:slf4j-binding:$slf4j_version"

    testCompile "org.jmockit:jmockit:$jmockit_version",
            "com.github.fakemongo:fongo:$fakemongo_version",
            "org.assertj:assertj-core:$assertj_version",
            "com.github.nwillc:jdk_contract_tests:$jdk_contract_tests_version",
            "junit:junit:4.12"

}

configurations {
    compile.exclude group: 'com.google.code.findbugs', module: 'jsr305'
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs += '-parameters'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
        csv.enabled = false
    }
}

gradleLint.rules = ['archaic-wrapper', 'all-dependency', 'overridden-dependency-version']

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs += ['-Xlint:unchecked']
    }
}

processResources.dependsOn buildInfo

release {
    failOnSnapshotDependencies = true
    allowLocalModifications = true
    releaseDryRun = false
    scm = 'git'
}

shadowJar {
    baseName = "mysnipserver-$project.version-standalone"
    classifier = null
    version = null
}

pmd {
    toolVersion = '4.3'
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    ruleSets = [
            'basic',
            'braces',
            'naming',
            'clone',
            'codesize',
            'controversial',
            'design',
            'finalizers',
            'imports',
            'junit',
            'logging-java',
            'migrating',
            'optimizations',
            'strictexception',
            'strings',
            'sunsecure',
            'typeresolution',
            'unusedcode'
    ]
}

test {
    beforeTest { descriptor ->
        logger.lifecycle("\tRunning $descriptor.className.$descriptor.name")
    }

    afterSuite { descriptor, result ->
        if (descriptor.parent == null) {
            logger.lifecycle("\tTests run: $result.testCount, Failures: $result.failedTestCount, Skipped: $result.skippedTestCount")
        }
    }

    testLogging {
        showStandardStreams true
        exceptionFormat "full"
    }
}

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/linux.dockerfile')
    from 'anapsix/alpine-java:8_server-jre_unlimited'
    def labels = [maintainer: 'nwillc@gmail.com']
    label labels
    runCommand 'mkdir -p /opt/service'
    copyFile 'libs/mysnipserver-2.8.6-SNAPSHOT-standalone.jar', '/opt/service'
    workingDir '/opt/service'
    defaultCommand '--port', '8080', '--store', 'MemoryBacked'
    entryPoint 'java', '-jar', 'mysnipserver-2.8.6-SNAPSHOT-standalone.jar'
}


task buildImage(type: DockerBuildImage) {
    dependsOn assemble
    dependsOn createDockerfile
    inputDir = project.file("build")
    dockerFile = createDockerfile.destFile
    tag = "nwillc/mysnipserver:${project.version}"
}
