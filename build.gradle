/*
 * Copyright (c) 2016, nwillc@gmail.com
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

buildscript {
    repositories {
        maven { url 'http://jcenter.bintray.com'}
        maven {
            url 'https://maven.eveoh.nl/content/repositories/releases'
        }
    }
    dependencies {
        classpath 'gradle.plugin.com.github.nwillc:buildinfo:0.1.2',
                'au.com.ish.gradle:release:2.2.2',
                'org.tmatesoft.sqljet:sqljet:1.1.9',
                'com.github.rholder:gradle-one-jar:1.0.4',
                'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M3'
    }
}

plugins {
    id 'java'
    id 'com.github.nwillc.vplugin' version '2.0.1'
    id 'com.github.nwillc.buildinfo' version '0.1.2'
    id 'nebula.lint' version '6.1.4'
}

repositories {
    mavenLocal()
    maven { url 'http://jcenter.bintray.com'}
}

dependencies {
    compile 'com.github.nwillc:opa:' + opa_version,
            'com.fasterxml.jackson.core:jackson-core:2.8.5',
            'com.fasterxml.jackson.core:jackson-databind:2.8.5',
            'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.8.5',
            'com.google.api-client:google-api-client:1.22.0',
            'com.google.http-client:google-http-client-jackson2:1.22.0',
            'com.google.http-client:google-http-client:1.22.0',
            'com.google.inject:guice:4.1.0',
            'com.graphql-java:graphql-java-annotations:0.13.1',
            'com.graphql-java:graphql-java:2.2.0',
            'com.groupon:locality-uuid:1.1.1',
            'com.sparkjava:spark-core:' + spark_version,
            'commons-cli:commons-cli:1.3',
            'javax.validation:validation-api:1.1.0.Final',
            'org.apache.httpcomponents:httpclient:4.5.2',
            'org.mongodb:mongo-java-driver:' + mongo_driver_version,
            'org.tinylog:tinylog:1.2-beta-1'

    runtime 'org.tinylog:slf4j-binding:1.2-beta-1'

    testCompile 'com.github.nwillc:jdk_contract_tests:' + jdk_contract_tests_version,
            'com.github.nwillc:opa-impl-tests:' + opa_impl_tests_version,
            'org.mockito:mockito-core:' + mockito_core_version,
            'com.fasterxml.jackson.core:jackson-core:2.8.5',
            'com.fasterxml.jackson.core:jackson-databind:2.8.5',
            'com.github.fakemongo:fongo:2.0.6',
            'junit:junit:4.12',
            'org.assertj:assertj-core:3.6.1'
}

configurations {
    compile.exclude group: 'org.slf4j', module: 'slf4j-simple'
}

apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'release'
apply plugin: 'gradle-one-jar'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'com.github.nwillc.vplugin'

group = 'com.github.nwillc'
version = '2.6.5'
targetCompatibility = '1.8'
sourceCompatibility = '1.8'
mainClassName = 'com.github.nwillc.mysnipserver.MySnipServer'

gradleLint.rules = ['archaic-wrapper','all-dependency','overridden-dependency-version']

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked'
    }
}

test {
    maxParallelForks 4

    beforeTest { descriptor ->
        logger.lifecycle('\tRunning ' + descriptor.className + '.' + descriptor.name)
    }

    afterSuite { descriptor, result ->
        if (descriptor.parent == null) {
            logger.lifecycle('\tTests run: ' + result.testCount
                    + ', Failures: ' + result.failedTestCount
                    + ', Skipped: ' + result.skippedTestCount)
        }
    }

    testLogging {
        exceptionFormat 'full'
    }
}

processResources.dependsOn buildInfo

release {
    failOnSnapshotDependencies = true
    allowLocalModifications = true
    releaseDryRun = false
    scm = 'git'
}

task oneJar(type: OneJar) {
    dependsOn build
    mainClass = 'com.github.nwillc.mysnipserver.MySnipServer'
    additionalDir = file('build/resources/main')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
        csv.enabled false
    }
}

pmd {
    toolVersion = '4.3'
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    ruleSets = [
            'basic',
            'braces',
            'naming',
            'clone',
            'codesize',
            'controversial',
            'design',
            'finalizers',
            'imports',
            'junit',
            'logging-java',
            'migrating',
            'optimizations',
            'strictexception',
            'strings',
            'sunsecure',
            'typeresolution',
            'unusedcode'
    ]
}
