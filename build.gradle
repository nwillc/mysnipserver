import com.sun.org.apache.xalan.internal.xsltc.compiler.Copy

/*
 * Copyright (c) 2016,  nwillc@gmail.com
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://maven.eveoh.nl/content/repositories/releases"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.nwillc:vplugin:1.3.1",
                "gradle.plugin.com.github.nwillc:buildinfo:0.1.2",
                'au.com.ish.gradle:release:2.2.2',
                'org.tmatesoft.sqljet:sqljet:1.1.9',
                'com.github.rholder:gradle-one-jar:1.0.4'
    }
}

plugins {
    id "java"
    id "com.github.nwillc.vplugin" version "1.2.5"
    id "com.github.nwillc.buildinfo" version "0.1.2"
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'com.sparkjava:spark-core:2.3',
            'commons-cli:commons-cli:1.3',
            'io.orchestrate:orchestrate-client:0.13.0',
            'com.google.inject:guice:4.1.0',
            'org.apache.httpcomponents:httpclient:4.5.2',
            'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.8.4',
            'javax.cache:cache-api:1.0.0',
            'com.google.api-client:google-api-client:1.22.0',
            'com.google.http-client:google-http-client:1.22.0',
            'com.github.ben-manes.caffeine:caffeine:2.3.3',
            'com.github.ben-manes.caffeine:jcache:2.3.3',
            'org.tinylog:tinylog:1.2-beta-1',
            'com.graphql-java:graphql-java:2.1.0',
            'com.graphql-java:graphql-java-annotations:0.11.0'
    runtime 'org.tinylog:slf4j-binding:1.2-beta-1'
    testCompile 'junit:junit:4.12',
            'com.github.nwillc:jdk_contract_tests:1.7.6',
            'org.mockito:mockito-core:2.2.5',
            'org.assertj:assertj-core:3.5.2'

}

configurations {
    compile.exclude group: 'org.slf4j', module: 'slf4j-simple'
}

apply plugin: 'application'
apply plugin: 'release'
apply plugin: 'gradle-one-jar'
apply plugin: "jacoco"
apply plugin: "pmd"

group = "com.github.nwillc"
version = "2.3.5"
targetCompatibility = "1.8"
sourceCompatibility = "1.8"
mainClassName = "com.github.nwillc.mysnipserver.MySnipServer"

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
}

test {
    useJUnit {
        excludeCategories 'com.github.nwillc.mysnipserver.IntegrationTest'
    }

    beforeTest { descriptor ->
        logger.lifecycle("\tRunning " + descriptor.className + "." + descriptor.name)
    }

    afterSuite { descriptor, result ->
        if (descriptor.parent == null) {
            logger.lifecycle("\tTests run: " + result.testCount
                    + ", Failures: " + result.failedTestCount
                    + ", Skipped: " + result.skippedTestCount)
        }
    }

    testLogging {
        exceptionFormat "full"
    }
}

task integrationTest(type: Test) {
    useJUnit {
        includeCategories 'com.github.nwillc.mysnipserver.IntegrationTest'
    }
}

processResources.dependsOn buildInfo

release {
    failOnSnapshotDependencies = true
    allowLocalModifications = true
    releaseDryRun = false
    scm = 'git'
}

task oneJar(type: OneJar) {
    mainClass = 'com.github.nwillc.mysnipserver.MySnipServer'
    additionalDir = file('build/resources/main')
}


jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

pmd {
    toolVersion = '4.3'
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    ruleSets = [
            "basic",
            "braces",
            "naming",
            "clone",
            "codesize",
            "controversial",
            "design",
            "finalizers",
            "imports",
            "junit",
            "logging-java",
            "migrating",
            "optimizations",
            "strictexception",
            "strings",
            "sunsecure",
            "typeresolution",
            "unusedcode"
    ]
}
